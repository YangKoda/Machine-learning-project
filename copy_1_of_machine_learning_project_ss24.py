# -*- coding: utf-8 -*-
"""Copy 1 of Machine Learning Project SS24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EfJ-EddBEYOOD9PZG3aiSwxq0uRCeAO5

# Machine Learning Project SS24

Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.impute import SimpleImputer

"""Read data from the file"""

dataset = pd.read_csv('ObesityDataSet_raw_and_data_sinthetic.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""Check for missing values in each column"""

missing_values = dataset.isnull().sum()
print(missing_values)

"""Displaying dataset"""

# Assuming X and y are numpy arrays
# Convert the numpy array to a pandas DataFrame
print(type(X))
df_X = pd.DataFrame(X)
df_y = pd.Series(y)

# Set display options to show all rows and columns
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Print the DataFrame and Series
print(df_X)

"""Exploratory Data Analysis (EDA)"""

# Scatter plot of all features against the target
column_names = dataset.columns[:-1]
plt.figure(figsize=(20, 15))
for i, col in enumerate(df_X.columns, 1):
    plt.subplot(5, 5, i)
    plt.scatter(df_X[col], df_y, alpha=0.5)
    plt.title(f'{column_names[i-1]} vs Obesity')
    plt.xlabel(column_names[i-1])
    plt.ylabel('Target')

plt.tight_layout()
plt.show()

"""Dropping some features"""

# Define the columns to drop
columns_to_drop = [15]

# Drop the columns from the NumPy array
X_dropped = np.delete(X, columns_to_drop, axis=1)

# Convert the result to a DataFrame if needed
df_X = pd.DataFrame(X_dropped)

# Display the resulting DataFrame
print(df_X)

"""Encoding categorical data with LabelEncoder"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
y = le.fit_transform(y)
columns_to_encode = [0, 4, 5, 8, 9, 11, 14, 15]
for col in columns_to_encode:
    X[:, col] = np.array(le.fit_transform(X[:, col]))

print(X)
print(y)

"""Splitting the dataset into Training Set and Test set"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
#columns_to_scale = [2, 4, 8, 16]
columns_to_scale = [2, 4]
for col in columns_to_scale:
  X_train[:, col] = sc.fit_transform(X_train[:, col].reshape(-1, 1)).reshape(-1)
  X_test[:, col] = sc.transform(X_test[:, col].reshape(-1, 1)).reshape(-1)
  X_train[0]

print(X_train[0])

"""Training the K-NN model in the training set"""

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=1)
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""Training the Kernel SVM model in the training set"""

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf')
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""Training the Naive Bayes model in the training set"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""Training the Decision Tree Classification model in the training set"""

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy')
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""Training the Random Forest Classification model in the training set"""

from  sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100, criterion = 'entropy')
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)